service: leitner-quiz-api
provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage, 'dev'}
    IS_OFFLINE: 'false'
    CARDS_TABLE_NAME: ${self:service}-${self:provider.stage}-cards
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-*"

package:
  patterns:
    - '!.git/**'
    - '!.gitignore'
    - '!.vscode/**'
    - '!test/**'
    - '!README.md'
    - 'dist/**'
    - 'node_modules/**'
    - '!node_modules/@types/**'

functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          method: ANY
          path: /
          cors:
            origins:
              - 'https://don7egqkuefue.cloudfront.net'
              - 'http://localhost:5173'
            headers:
              - Content-Type
              - Authorization
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowCredentials: true
      - http:
          method: ANY
          path: '{proxy+}'
          cors:
            origins:
              - 'https://don7egqkuefue.cloudfront.net'
              - 'http://localhost:5173'
            headers:
              - Content-Type
              - Authorization
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowCredentials: true

resources:
  Resources:
    CardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-cards
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-plugin-typescript
  - serverless-offline